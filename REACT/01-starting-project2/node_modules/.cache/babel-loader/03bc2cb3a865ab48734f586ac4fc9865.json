{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\REACT\\\\01-starting-project2\\\\src\\\\store\\\\auth-contex.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IS_LOGGIN = \"isLoggeIn\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const userLoggingInfo = localStorage.getItem(IS_LOGGIN);\n    if (userLoggingInfo === \"1\") setIsLoggedIn(true);\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(IS_LOGGIN, \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(IS_LOGGIN);\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggIn: isLoggedIn,\n      onLogin: logoutHandler,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/workspace/REACT/01-starting-project2/src/store/auth-contex.js"],"names":["React","useState","useEffect","IS_LOGGIN","AuthContext","createContext","isLoggIn","onLogout","onLogin","email","password","AuthContextProvider","props","isLoggedIn","setIsLoggedIn","userLoggingInfo","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,CAAoB;AACtCC,EAAAA,QAAQ,EAAE,KAD4B;AAEtCC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFoB;AAGtCC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE;AAHM,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBd,SAArB,CAAxB;AACA,QAAIY,eAAe,KAAK,GAAxB,EAA6BD,aAAa,CAAC,IAAD,CAAb;AAC9B,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMI,YAAY,GAAG,CAACT,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAM,IAAAA,YAAY,CAACG,OAAb,CAAqBhB,SAArB,EAAgC,GAAhC;AACAW,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GALD;;AAOA,QAAMM,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,YAAY,CAACK,UAAb,CAAwBlB,SAAxB;AACAW,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,QAAQ,EAAEO,UADL;AAELL,MAAAA,OAAO,EAAEY,aAFJ;AAGLb,MAAAA,QAAQ,EAAEa;AAHL,KADT;AAAA,cAOGR,KAAK,CAACU;AAPT;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/BM;;GAAMX,mB;;KAAAA,mB;AAiCb,eAAeP,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst IS_LOGGIN = \"isLoggeIn\";\r\nconst AuthContext = React.createContext({\r\n  isLoggIn: false,\r\n  onLogout: () => {},\r\n  onLogin: (email, password) => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const userLoggingInfo = localStorage.getItem(IS_LOGGIN);\r\n    if (userLoggingInfo === \"1\") setIsLoggedIn(true);\r\n  }, []);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(IS_LOGGIN, \"1\");\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(IS_LOGGIN);\r\n    setIsLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        isLoggIn: isLoggedIn,\r\n        onLogin: logoutHandler,\r\n        onLogout: logoutHandler,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}